//Yee Chong Tan, Theo Turner, Jasmine Lu

import java_cup.runtime.*;

parser code
{:
	public void syntax_error(Symbol current_token) { 
		syntaxErrors = true;
		report_error( "Syntax error at line " + (current_token.left+1) + ", column " + current_token.right, null );
	}

	public boolean syntaxErrors = false;

:}

/* Terminals */
terminal      MAIN, CHAR, BOOL;
terminal      NOT, AND, OR;
terminal      INT, FLOAT, RAT, TOP, STRING;
terminal      PLUS, MINUS, TIMES, DIVIDE, EXPONENT;
terminal      DICT, SEQ;
terminal      IN, LEN, CONCATENATE, LESS, LESSEQ, MORE, MOREEQ, EQUAL, NOTEQUAL;
terminal      TDEF, FDEF, ALIAS;
terminal      ID, CHARACTER, BOOLEAN_CONSTANT;
terminal      INTEGER, FLOATING_POINT, RATIONAL;
terminal      ASS;
terminal      DOT;
terminal      IF, ELSE, WHILE, FORALL, THEN, ENDIF, ELSEIF, DO, ENDDO, RETURN, READ, PRINT;
terminal      OBRACKET, CBRACKET, OSQUAREBRACKET, CSQUAREBRACKET, OCURLYBRACKET, CCURLYBRACKET;
terminal      COMMA, COLON, SEMICOLON, VOID;

/* Nonterminals */
non terminal      program, declaration_list, main, body, bodyobj;
non terminal      global_declaration_list;
non terminal      declaration, statement_list, statement;
non terminal      type_declaration, type_declaration_list, alias, type_id;
non terminal      function_declaration, formal_parameter_list;
non terminal      variable_declaration, literal;
non terminal      dictionary, dictionary_declaration, dictionary_values, dictionary_second_part;
non terminal      sequence, sequence_declaration, sequence_values, sequence_second_part;
non terminal      indexing, sequence_slicing, sequence_object, assignment;
non terminal      expression, expression_list, field_ref;
non terminal      input, output, function_call, return_expr;
non terminal      loops, if_else, else_if_list, while_do, for_all, id_list, operator;

/* Precedence */
precedence left ID, PLUS, MINUS, TIMES, DIVIDE, AND, OR, COLON, CONCATENATE, DOT;
precedence left CHAR, BOOL, INT, FLOAT, TOP, DICT, SEQ, RAT, ALIAS;
precedence left FDEF, TDEF;
precedence right EXPONENT, IN;
precedence left  LESS, LESSEQ, MORE, MOREEQ, EQUAL, NOTEQUAL;
precedence left IF, WHILE, FORALL, ELSEIF, RETURN, READ, PRINT;
precedence left OBRACKET, CBRACKET;


/* Grammar */

start with program;

program     ::= global_declaration_list main global_declaration_list;

global_declaration_list   ::= declaration_list
              | /* empty */
              ;

declaration_list ::= declaration declaration_list
            | declaration
            ;

declaration   ::= type_declaration        
        | variable_declaration
        | function_declaration
        | assignment SEMICOLON
        | alias
        | sequence_declaration
        | dictionary_declaration;

main      ::= MAIN OCURLYBRACKET body CCURLYBRACKET SEMICOLON;

body      ::= bodyobj body
            | bodyobj
            ;

bodyobj ::= statement_list
          | declaration_list;

statement_list  ::= statement statement_list
        | statement;

type_declaration    ::= TDEF type_id OCURLYBRACKET type_declaration_list CCURLYBRACKET SEMICOLON;

type_declaration_list ::= type_id ID COMMA type_declaration_list 
            | type_id ID;
            
type_id     ::= BOOL | INT | RAT | FLOAT | CHAR | TOP | ID | dictionary | sequence;

function_declaration  ::= FDEF VOID ID OBRACKET formal_parameter_list CBRACKET OCURLYBRACKET body CCURLYBRACKET SEMICOLON
            | FDEF type_id ID OBRACKET formal_parameter_list CBRACKET OCURLYBRACKET body CCURLYBRACKET SEMICOLON;

formal_parameter_list ::= type_declaration_list
            | id_list
            | /* empty */
            ;

alias       ::= ALIAS type_id type_id SEMICOLON;

assignment  ::= ID ASS expression_list SEMICOLON
            | field_ref ASS expression_list SEMICOLON;

variable_declaration  ::= type_id ID ASS expression_list SEMICOLON
            | type_id ID SEMICOLON;

id_list     ::= ID COMMA id_list
            | ID
            ;

literal     ::= CHARACTER | BOOLEAN_CONSTANT | INTEGER | FLOATING_POINT | RATIONAL | ID | STRING | sequence_second_part | dictionary_second_part;

dictionary  ::= DICT LESS type_id COMMA type_id MORE;

dictionary_declaration  ::= dictionary ID ASS dictionary_second_part SEMICOLON;

dictionary_second_part  ::= OCURLYBRACKET dictionary_values CCURLYBRACKET;

dictionary_values   ::= ID COLON dictionary_values
            | ID COLON ID
            | /* empty */
            ;

sequence  ::= SEQ LESS type_id MORE;

sequence_declaration  ::= sequence ID ASS sequence_second_part SEMICOLON
                      | sequence ID ASS function_call SEMICOLON;

sequence_second_part  ::= OSQUAREBRACKET sequence_values CSQUAREBRACKET;

sequence_values     ::= literal COMMA sequence_values
            | literal
            | /* empty */
            ;

indexing  ::= LEN OBRACKET ID CBRACKET;

sequence_slicing    ::= sequence_object sequence_slicing
                    | sequence_object;

sequence_object ::=  OSQUAREBRACKET expression COLON expression CSQUAREBRACKET
            | OSQUAREBRACKET expression COLON CSQUAREBRACKET 
            | OSQUAREBRACKET COLON expression CSQUAREBRACKET
            | OSQUAREBRACKET expression CSQUAREBRACKET;             

expression_list     ::= expression COMMA expression_list
            | expression;

operator ::= PLUS | MINUS | TIMES | DIVIDE | EXPONENT | CONCATENATE | AND | OR | IN | LESS | LESSEQ | MORE | MOREEQ| EQUAL | NOTEQUAL;

expression    ::= expression operator expression
              | MINUS expression
              | NOT expression
              | expression AND expression
              | expression OR expression
              | expression IN expression
              | LEN OBRACKET expression CBRACKET
              | OBRACKET expression CBRACKET
              | ID sequence_slicing
              | indexing
              | literal
              | field_ref
              | function_call
              | return_expr
              ;

field_ref     ::= ID DOT ID
        | ID DOT field_ref;

statement     ::= input | output | function_call SEMICOLON| return_expr | loops | assignment;

input     ::= READ ID SEMICOLON;

output      ::= PRINT expression SEMICOLON;

function_call   ::= ID OBRACKET expression_list CBRACKET;

return_expr      ::= RETURN expression SEMICOLON
        | RETURN SEMICOLON;

loops       ::= if_else | else_if_list | while_do | for_all;


if_else     ::= IF OBRACKET expression CBRACKET THEN body ELSE body ENDIF
        | IF OBRACKET expression CBRACKET THEN body ENDIF
        | IF OBRACKET expression CBRACKET THEN body else_if_list ELSE body ENDIF
        | IF OBRACKET expression CBRACKET THEN body else_if_list ENDIF
        ;

else_if_list  ::= ELSEIF OBRACKET expression CBRACKET THEN body else_if_list
        | ELSEIF OBRACKET expression CBRACKET THEN body
        ;

while_do    ::= WHILE OBRACKET expression CBRACKET DO body ENDDO
        ;

for_all     ::= FORALL OBRACKET ID IN ID CBRACKET DO body ENDDO
        ;
