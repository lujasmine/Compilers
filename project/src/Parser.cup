//Yee Chong Tan, Theo Turner, Jasmine Lu

import java_cup.runtime.*;

parser code
{:
	public void syntax_error(Symbol current_token) { 
		syntaxErrors = true;
		report_error( "Syntax error at line " + (current_token.left+1) + ", column " + current_token.right, null );
	}

	public boolean syntaxErrors = false;

:}

/* Terminals */
terminal 			MAIN, CHAR, BOOL;
terminal 			NOT, AND, OR;
terminal 			INT, FLOAT, RAT, TOP, STRING;
terminal 			PLUS, MINUS, TIMES, DIVIDE, EXPONENT;
terminal 			DICT, SEQ;
terminal 			IN, D, LEN, CONCATENATE, LESS, LESSEQ, MORE, MOREEQ, EQUAL, NOTEQUAL;
terminal 			TDEF, FDEF, ALIAS;
terminal 			ID, CHARACTER, BOOLEAN_CONSTANT;
terminal 			INTEGER, FLOATING_POINT, RATIONAL;
terminal 			ASS;
terminal 			DOT;
terminal 			IF, ELSE, WHILE, FORALL, THEN, ENDIF, ELSEIF, DO, ENDDO, RETURN, READ, PRINT;
terminal 			OBRACKET, CBRACKET, OSQUAREBRACKET, CSQUAREBRACKET, OCURLYBRACKET, CCURLYBRACKET;
terminal 			COMMA, COLON, SEMICOLON, VOID;

/* Nonterminals */
non terminal			program, declaration_list, main, body;
non terminal 			global_declaration_list;
non terminal 			declaration, statement_list, statement;
non terminal 			type_declaration, type_declaration_list, alias, type_id;
non terminal 			function_declaration, formal_parameter_list;
non terminal 			variable_declaration, lit_list, literal;
non terminal 			dictionary, dictionary_declaration, dictionary_values;
non terminal 			sequence, sequence_declaration, sequence_values;
non terminal 			indexing, sequence_slicing;
non terminal 			expression, expression_list, field_ref;
non terminal 			input, output, function_call, return;
non terminal 			loops, if_else, else_if_list, while_do, for_all;


/* Precedence */
precedence left PLUS, MINUS, TIMES, DIVIDE, AND, OR, CONCATENATE, DOT;
precedence right EXPONENT, IN;
precedence nonassoc NOT, LESS, LESSEQ, MORE, MOREEQ, EQUAL, NOTEQUAL;
precedence nonassoc RETURN, READ, PRINT, ID, ELSEIF, WHILE, IF, FORALL;
precedence left OBRACKET, CBRACKET;


/* Grammar */

start with program;

program     ::= global_declaration_list main global_declaration_list;

global_declaration_list 	::= declaration_list
							| /* empty */
							;

declaration_list    ::= declaration declaration_list
            | declaration
            ;

declaration   ::= type_declaration
        | function_declaration
        | alias
        | variable_declaration
        | sequence_declaration
        | dictionary_declaration;

main      ::= MAIN OCURLYBRACKET body CCURLYBRACKET;

body      ::= statement_list
        | declaration_list
        | declaration_list statement_list;

statement_list  ::= statement statement_list
        | statement;

type_declaration    ::= TDEF type_id OCURLYBRACKET type_declaration_list CCURLYBRACKET SEMICOLON;

type_declaration_list ::= type_id ID COMMA type_declaration_list SEMICOLON
            | type_id ID SEMICOLON;

type_id     ::= BOOL | INT | RAT | FLOAT | CHAR | TOP | ID | dictionary | sequence;

function_declaration  ::= FDEF VOID ID OBRACKET formal_parameter_list CBRACKET OCURLYBRACKET body CCURLYBRACKET SEMICOLON
            | FDEF type_id ID OBRACKET formal_parameter_list CBRACKET OCURLYBRACKET body CCURLYBRACKET SEMICOLON;

formal_parameter_list ::= type_declaration_list
            | /* empty */
            ;

alias       ::= ALIAS type_id type_id SEMICOLON;

variable_declaration  ::= type_id ID ASS lit_list SEMICOLON
            | type_id ID SEMICOLON;

lit_list    ::= literal COMMA lit_list
        	| literal;

literal     ::= CHARACTER | BOOLEAN_CONSTANT | INTEGER | FLOATING_POINT | RATIONAL | ID | STRING;

dictionary 	::= DICT LESS type_id COMMA type_id MORE;

dictionary_declaration 	::= dictionary ID ASS OCURLYBRACKET dictionary_values CCURLYBRACKET SEMICOLON;

dictionary_values		::= ID COLON dictionary_values
						| ID COLON ID
						| /* empty */
						;

sequence	::= SEQ LESS type_id MORE;

sequence_declaration	::= sequence ID ASS OSQUAREBRACKET sequence_values CSQUAREBRACKET SEMICOLON;

sequence_values			::= literal COMMA sequence_values
						| literal
						| /* empty */
						;

indexing	::= LEN OBRACKET ID CBRACKET;

sequence_slicing 		::= ID OSQUAREBRACKET expression COLON expression CSQUAREBRACKET
						| ID OSQUAREBRACKET expression COLON CSQUAREBRACKET 
						| ID OSQUAREBRACKET COLON expression CSQUAREBRACKET
						| ID OSQUAREBRACKET expression CSQUAREBRACKET;

expression_list 		::= expression COMMA expression_list
						| expression;

expression 		::= expression PLUS expression
				| expression MINUS expression
				| expression TIMES expression
				| expression DIVIDE expression
				| expression EXPONENT expression
				| MINUS expression
				| NOT expression
				| expression AND expression
				| expression OR expression
				| expression IN expression
				| D OSQUAREBRACKET expression CSQUAREBRACKET
				| LEN OBRACKET expression CBRACKET
				| expression CONCATENATE expression
				| expression LESS expression
				| expression LESSEQ expression
				| expression MORE expression
				| expression MOREEQ expression
				| expression EQUAL expression
				| expression NOTEQUAL expression
				| OBRACKET expression CBRACKET
				| function_call
				| sequence_slicing
				| indexing
				| literal
				| field_ref
				| return
				;

field_ref 		::= ID DOT ID
				| ID DOT field_ref;

statement 		::= input | output | function_call | return | loops;

input			::= READ ID SEMICOLON;

output			::= PRINT expression SEMICOLON;

function_call 	::= ID OBRACKET expression_list CBRACKET SEMICOLON;

return 			::= RETURN expression_list SEMICOLON
				| RETURN SEMICOLON;

loops 			::= if_else | else_if_list | while_do | for_all;


if_else			::= IF OBRACKET expression CBRACKET THEN body ELSE body ENDIF
				| IF OBRACKET expression CBRACKET THEN body ENDIF
				| IF OBRACKET expression CBRACKET THEN body else_if_list ELSE body ENDIF
				| IF OBRACKET expression CBRACKET THEN body else_if_list ENDIF
				;

else_if_list	::= ELSEIF OBRACKET expression CBRACKET THEN body else_if_list
				| ELSEIF OBRACKET expression CBRACKET THEN body
				;

while_do		::= WHILE OBRACKET expression CBRACKET DO body ENDDO
				;

for_all			::= FORALL OBRACKET ID IN ID CBRACKET DO body ENDDO
				;
